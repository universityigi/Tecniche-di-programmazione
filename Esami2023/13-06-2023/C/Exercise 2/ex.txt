Esercizio 2 - 13-06-2023 C
  
Regole
In entrambi gli esercizi NON è consentito accedere ai campi della struttura (next, info). Si deve quindi utilizzare l’interfaccia di lista fornita in aux.h.
È possibile definire funzioni ausiliarie. Negli esercizi in cui è richiesta una soluzione ricorsiva, tutte le funzioni ausiliarie usate devono essere ricorsive.
Funzioni che non processano direttamente i dati, ovvero quelle O(1), ovviamente non saranno ricorsive (né iterative).
Non è consentito usare variabili globali (comprese zone di memoria allocate dinamicamente) e altre strutture dati (es. array) non esplicitamente indicati nel testo dell’esercizio.

Esercizio 2.1

Scrivere una funzione ricorsiva:

  TipoLista convoluzione(TipoLista l, int k);

la quale riceve una lista di interi l e un intero k maggiore strettamente (>) di 0. La funzione deve restituire una nuova lista output di lunghezza pari alla parte intera superiore della lunghezza di l diviso k (ad esempio se l ha lunghezza 10 e k è pari a 3, output deve avere una lunghezza pari alla parte intera superiore di 10/3=3,333, ossia 4). L’elemento i-esimo di output deve essere pari alla somma degli elementi k*i-esimo fino al k*(i+1)-1-esimo di l (in altre parole output[i] = l[k*i]+l[k*i+1]+...+l[k*(i+1)-1]). Se la lista l non è lunga abbastanza da contenere tutti gli elementi necessari per il calcolo dell’ultimo elemento di output, allora si considerino pari a 0 gli elementi mancanti (ad esempio se l ha lunghezza 11, output deve avere una lunghezza pari a 4 e l’ultimo elemento di output deve essere pari alla somma del decimo elemento e dell’undicesimo elemento di l).

Nota bene:
se l è una lista vuota, la funzione deve restituire una lista vuota.

Esempio 1
l: [1,2,3,4,5,6,7,8,9,10]
k: 3
  
il primo elemento di output è pari alla somma dei primi 3 elementi di l [1,2,3]
il secondo elemento di output è pari alla somma dei successivi 3 elementi di l [4,5,6]
il terzo elemento di output è pari alla somma dei successivi 3 elementi di l [7,8,9]
il quarto elemento di output è pari alla somma dei successivi 3 elementi di l [10] (visto che l’undicesimo e il dodicesimo elemento di l non esistono, si considerino pari a 0 nel calcolo della somma)
  
output: [6,15,24,10]
  
Esempio 2

l: []
k: 4
  
l è una lista vuota, quindi la funzione deve ritornare una lista vuota
  
output: []
  
Esempio 3
  
l: [3,6,1,9,3,1,0]
k: 2
  
il primo elemento di output è pari alla somma dei primi 2 elementi di l [3,6]
il secondo elemento di output è pari alla somma dei successivi 2 elementi di l [1,9]
il terzo elemento di output è pari alla somma dei successivi 2 elementi di l [3,1]
il quarto elemento di output è pari alla somma dei successivi 2 elementi di l [0] (visto che l’ottavo elemento non è presente in l, lo si consideri pari a 0 nel calcolo della somma)
  
output: [9,10,4,0]

Esercizio 2.2

Scrivere una funzione:

  int* maxPooling(TipoLista* liste, int* v, int n);

la quale riceve un array di n liste di interi positivi e un array v di n interi maggiori strettamente di 0.
La funzione deve restituire un’array output di n elementi tale che output[i] sia pari al massimo elemento della lista
ottenuta applicando la funzione di convoluzione sulla lista di indice i dell’array liste con k pari a v[i].

Nota bene:
si consideri il massimo di una lista vuota pari a 0.
  
Esempio
  
liste: [
  [5,1,3,1,2]		la lista ottenuta applicando convoluzione con k=v[0]=2 è [6,4,2] (max 6)
  [1,7,0,2]		la lista ottenuta applicando convoluzione con k=v[0]=1 è [1,7,0,2] (max 7)
  [5,1,3,1,1,1,4]	la lista ottenuta applicando convoluzione con k=v[0]=3 è [9,3,4] (max 9)	
  []			la lista è vuota, quindi la lista ottenuta applicando convoluzione è [] (max 0)
]
v: [2,1,3,0]

output: [6,7,9,0]
