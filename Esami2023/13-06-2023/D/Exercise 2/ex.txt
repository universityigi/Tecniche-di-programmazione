Esercizio 2 - 13-06-2023 D

Regole
In entrambi gli esercizi è consentito accedere ai campi della struttura (next, info). Si può anche utilizzare l’interfaccia di lista fornita in aux.h.
È possibile definire funzioni ausiliarie. Negli esercizi in cui è richiesta una soluzione ricorsiva, tutte le funzioni ausiliarie usate devono essere ricorsive.
Funzioni che non processano direttamente i dati, ovvero quelle O(1), ovviamente non saranno ricorsive (né iterative).
Non è consentito usare variabili globali (comprese zone di memoria allocate dinamicamente) e altre strutture dati (es. array) non esplicitamente indicati nel testo dell’esercizio.

Esercizio 2.1

Scrivere una funzione ricorsiva:

  TipoLista porzioneDiListe(TipoLista l1, TipoLista l2, int k);
  
la quale riceve due liste di interi l1 ed l2, entrambe di lunghezza maggiore o uguale a k. La funzione deve ritornare una nuova lista che contiene nel seguente ordine:
i primi k elementi di l1 (nell'ordine in cui compaiono in l1)
gli ultimi k elementi di l2 (nell'ordine in cui compaiono in l2)

Nota bene: Se k è 0, ritornare una lista vuota.

Esempio 1

l1: [1, 4, 2, 3] 
l2: [5, 2, 4, 1]
k: 3
Output: [1, 4, 2, 2, 4, 1]

Infatti, i primi k=3 elementi di l1 sono [1,4,2] e gli ultimi k=3 elementi di l2 sono [2, 4, 1].

Esempio 2

l1: lista vuota 
l2: [1, 2]
k: 0
Output: lista vuota

Infatti, se k=0 va ritornata una lista vuota.

Esempio 3

l1: [3, 6, 1, 9, 3, 1, 0] 
l2: [3, 2, 5, 8, 3, 4]
k: 2
Output: [3, 6, 3, 4]

Infatti, i primi k=2 elementi di l1 sono [3,6] e gli ultimi k=2 elementi di l2 sono [3,4].


Esercizio 2.2

Scrivere una funzione:

  TipoLista diffPorzioniDiListe(TipoLista* liste1, TipoLista* liste2, int n, int k);
  
la quale riceve due array liste1 e liste2, ognuno contenente n liste di interi, e un intero k. La funzione deve ritornare una nuova lista di lunghezza n,
tale che l'elemento all'indice i sia pari alla differenza tra la somma dei primi k elementi di liste1[i] e gli ultimi k elementi di liste2[i].

Nota bene:
 -si assuma che tutte le liste in liste1 e liste2 abbiano lunghezza maggiore o uguale a k
 -se n=0, la funzione deve restituire una lista vuota
 -se k=0, ogni differenza tra la somma dei primi k elementi di liste1[i] e gli ultimi k elementi di liste2[i] va considerata pari a 0.
 
Esempio

liste1: [
  [6, 3, 8, 9, 2, 9],
  [8, 8, 9, 8, 3, 4],
  [9, 8, 6, 5, 4]
]
liste2: [ 
  [7, 1, 1, 5, 6, 2, 2, 1, 5],
  [5, 5, 1, 7, 7, 5],
  [1, 5, 1, 8, 8]
]
k: 2

Output: [
  3, (infatti, la somma dei primi k=2 elementi di liste1[0] è 6+3=9, mentre la somma degli ultimi k=2 elementi di liste2[0] è 1+5=6)
  4, (infatti, la somma dei primi k=2 elementi di liste1[1] è 8+8=16, mentre la somma degli ultimi k=2 elementi di liste2[1] è 7+5=12)
  3, (infatti, la somma dei primi k=2 elementi di liste1[2] è 9+8=17, mentre la somma degli ultimi k=2 elementi di liste2[2] è 8+8=16)
]
